import telebot
import requests
import random
from collections import defaultdict

bot = telebot.TeleBot('7627109915:AAGw5hTJVOlBasDFGJBj_lyPye66rshZrg4')
MY_CHAT_ID = 6707920884
OPENROUTER_API_KEY = "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"
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

user_states = {}
battle_scores = {}
rhyme_game = {}
leaderboard_battle = defaultdict(lambda: {"wins": 0, "games": 0})
leaderboard_rhyme = defaultdict(lambda: {"longest_rounds": 0})

# –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (13 –ò–ò)
MODELS = [
    "openai/gpt-3.5-turbo",
    "meta-llama/llama-3.1-8b-instruct",
    "mistralai/mixtral-8x7b-instruct",
    "google/gemma-2-9b-it",
    "gryphe/mythomax-l2-13b",
    "meta-llama/llama-3-8b-instruct",
    "openai/gpt-4o-mini",
    "mistralai/mistral-7b-instruct",
    "cohere/command-r-plus",
    "qwen/qwen-2-7b-instruct",
    "facebook/xglm-4.5b",
    "togethercomputer/redpajama-incite-7b-instruct",
    "huggingfaceh4/zephyr-7b-beta",
    "openchat/openchat-3.5-1210",
    "neversleep/noromaid-20b"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1 = telebot.types.KeyboardButton("üé§ –†–µ–ø-–±–∞—Ç—Ç–ª")
btn2 = telebot.types.KeyboardButton("üéµ –ò–≥—Ä–∞ –≤ —Ä–∏—Ñ–º—É")
btn3 = telebot.types.KeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥")
btn4 = telebot.types.KeyboardButton("–°–∞–π—Ç")
btn5 = telebot.types.KeyboardButton("–°–≤—è–∑—å")
start_markup.add(btn1, btn2, btn3, btn4, btn5)

game_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_back = telebot.types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
game_menu.add(btn_back)


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ø–µ—Ä—Å–∫–æ–≥–æ —Å—Ç–∏—Ö–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ (–±–µ–∑ —Å—Ç–∏–ª–µ–π)
def generate_poem(round_num=1):
    results = []
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}

    for model in MODELS:
        payload = {
            "model": model,
            "messages": [
                {"role": "system",
                 "content": "–¢—ã —Ä–µ–ø–µ—Ä. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°–æ—Å—Ç–∞–≤—å —Ä–æ–≤–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏ —Å —á–µ—Ç–∫–∏–º —Ä–∏—Ç–º–æ–º –∏ –∑–≤—É—á–Ω–æ–π —Ä–∏—Ñ–º–æ–π (1-3, 2-4 –∏–ª–∏ 1-4, 2-3). –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
                {"role": "user", "content": f"–ù–∞–ø–∏—à–∏ 4-—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–ø, —Ä–∞—É–Ω–¥ {round_num}."}
            ],
            "max_tokens": 150,
            "temperature": 0.8
        }
        try:
            response = requests.post(OPENROUTER_API_URL, json=payload, headers=headers)
            response.raise_for_status()
            poem = response.json()["choices"][0]["message"]["content"].strip()
            lines = poem.split("\n")
            while len(lines) < 4:
                lines.append("...")
            results.append(f"[{model}]:\n" + "\n".join(lines[:4]))
        except requests.exceptions.RequestException as e:
            results.append(f"[{model}]: –û—à–∏–±–∫–∞: {str(e)}")
    return "\n\n".join(results)


# –û—Ü–µ–Ω–∫–∞ —Å—Ç–∏—Ö–∞ (gpt-3.5-turbo –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
def evaluate_poem(poem, is_user=False):
    prompt = f"–û—Ü–µ–Ω–∏ —ç—Ç–æ—Ç 4-—Å—Ç—Ä–æ—á–Ω—ã–π —Ä–µ–ø –ø–æ —à–∫–∞–ª–µ 1-10. –£—á–∏—Ç—ã–≤–∞–π —Ä–∏—Ç–º, —á–µ—Ç–∫–æ—Å—Ç—å —Ä–∏—Ñ–º—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞. –ï—Å–ª–∏ —Ä–∏—Ñ–º—ã –Ω–µ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ 4 —Å—Ç—Ä–æ–∫, —Å–Ω–∏–∂–∞–π –æ—Ü–µ–Ω–∫—É. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.\n\n{poem}"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}
    payload = {
        "model": "openai/gpt-3.5-turbo",
        "messages": [
            {"role": "system",
             "content": "–¢—ã –∫—Ä–∏—Ç–∏–∫ —Ä–µ–ø–∞. –û—Ü–µ–Ω–∏–≤–∞–π —Å—Ç—Ä–æ–≥–æ: —Ä–∏—Ç–º, —Ä–∏—Ñ–º–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–æ ‚Äî –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10."},
            {"role": "user", "content": prompt}
        ],
        "max_tokens": 10,
        "temperature": 0.5
    }
    try:
        response = requests.post(OPENROUTER_API_URL, json=payload, headers=headers)
        response.raise_for_status()
        score = response.json()["choices"][0]["message"]["content"].strip()
        return int(score) if score.isdigit() and 1 <= int(score) <= 10 else 5
    except requests.exceptions.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}"


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∏—Ñ–º—ã –¥–ª—è –≤—Ç–æ—Ä–æ–π –∏–≥—Ä—ã (—Å—Ç—Ä–æ–≥–∞—è —Ä–∏—Ñ–º–∞, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–∞ —Å–ª–æ–≤–∞)
def generate_rhyme(user_line):
    results = []
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}", "Content-Type": "application/json"}

    for model in MODELS:
        payload = {
            "model": model,
            "messages": [
                {"role": "system",
                 "content": "–¢—ã —Ä–µ–ø–µ—Ä. –ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π —Å—Ç—Ä–æ–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Å—Ç—Ä–æ–≥–æ —Ä–∏—Ñ–º—É—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ. –†–∏—Ñ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏. –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ '–Ø –∏–¥—É –¥–æ–º–æ–π', –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Ä–æ–¥–µ '–í—Å—Ç—Ä–µ—á—É –≤–µ—á–µ—Ä –∑–æ–ª–æ—Ç–æ–π', —Ä–∏—Ñ–º—É—è '–¥–æ–º–æ–π' —Å '–∑–æ–ª–æ—Ç–æ–π', –Ω–æ –Ω–µ '–Ø –ø—Ä–∏—à—ë–ª –¥–æ–º–æ–π'. –ù–µ –ø–∏—à–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞, —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É. –ë–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."},
                {"role": "user",
                 "content": f"–ü—Ä–æ–¥–æ–ª–∂–∏ –æ–¥–Ω–æ–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –∑–∞—Ä–∏—Ñ–º—É–π –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ '{user_line}'."}
            ],
            "max_tokens": 50,
            "temperature": 0.8
        }
        try:
            response = requests.post(OPENROUTER_API_URL, json=payload, headers=headers)
            response.raise_for_status()
            rhyme = response.json()["choices"][0]["message"]["content"].strip()
            results.append(f"[{model}]: {rhyme}")
        except requests.exceptions.RequestException as e:
            results.append(f"[{model}]: –û—à–∏–±–∫–∞: {str(e)}")
    return "\n".join(results)


@bot.message_handler(commands=['start'])
def main(message):
    user_states[message.chat.id] = None
    bot.send_message(message.chat.id, (
        "üé§ –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ä–µ–ø-–∞—Ä–µ–Ω–∞.\n"
        "–†–µ–ø-–±–∞—Ç—Ç–ª: –¥–æ 2 –ø–æ–±–µ–¥, max 3 —Ä–∞—É–Ω–¥–∞ (13 –ò–ò –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç).\n"
        "–ò–≥—Ä–∞ –≤ —Ä–∏—Ñ–º—É: –∫–∏–¥–∞–π —Å—Ç—Ä–æ–∫—É, 13 –ò–ò –∑–∞—Ä–∏—Ñ–º—É—é—Ç.\n"
        "–í—ã–±–∏—Ä–∞–π –∏–≥—Ä—É!"
    ), reply_markup=start_markup)


@bot.message_handler(content_types=['text', 'photo', 'video'])
def handle_message(message):
    chat_id = message.chat.id
    username = message.from_user.username or str(chat_id)

    if message.text == "üé§ –†–µ–ø-–±–∞—Ç—Ç–ª":
        bot.delete_message(chat_id, message.message_id)
        bot.send_message(chat_id, "–†–∞—É–Ω–¥ 1. –ß–∏—Ç–∞–π —Ä–µ–ø (4 —Å—Ç—Ä–æ–∫–∏)!", reply_markup=game_menu)
        user_states[chat_id] = {"state": "battle", "round": 1, "user_wins": 0, "rival_wins": 0}
        battle_scores[chat_id] = []

    elif message.text == "üéµ –ò–≥—Ä–∞ –≤ —Ä–∏—Ñ–º—É":
        bot.delete_message(chat_id, message.message_id)
        bot.send_message(chat_id, "–ö–∏–¥–∞–π —Å—Ç—Ä–æ–∫—É, —Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å –ò–ò –∑–∞—Ä–∏—Ñ–º—É—é—Ç!", reply_markup=game_menu)
        user_states[chat_id] = {"state": "rhyme_game", "rounds": 0}

    elif message.text == "üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥":
        top_battle = sorted(leaderboard_battle.items(),
                            key=lambda x: x[1]["wins"] / x[1]["games"] if x[1]["games"] else 0, reverse=True)[:10]
        top_rhyme = sorted(leaderboard_rhyme.items(), key=lambda x: x[1]["longest_rounds"], reverse=True)[:10]
        bot.send_message(chat_id, (
                "üèÜ –¢–æ–ø-10 –†–µ–ø-–±–∞—Ç—Ç–ª:\n" + "\n".join(
            f"@{u}: {d['wins']}/{d['games']} ({d['wins'] / d['games'] * 100:.1f}%)"
            for u, d in top_battle
        ) + "\n\nüèÜ –¢–æ–ø-10 –ò–≥—Ä–∞ –≤ —Ä–∏—Ñ–º—É:\n" + "\n".join(
            f"@{u}: {d['longest_rounds']} —Ä–∞—É–Ω–¥–æ–≤"
            for u, d in top_rhyme
        )
        ))

    elif message.text == "–°–∞–π—Ç":
        bot.send_message(chat_id,
                         "–°—Å—ã–ª–∫–∞: https://itvdn.blob.core.windows.net/cbs-images/cbs-images-a7e0d809-f232-4073-a035-0c7083421dde.PNG")

    elif message.text == "–°–≤—è–∑—å":
        bot.delete_message(chat_id, message.message_id)
        bot.send_message(chat_id, "–ü–∏—à–∏ –∏–ª–∏ –∫–∏–¥–∞–π —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ:")
        user_states[chat_id] = "awaiting_feedback"

    elif message.text == "üîô –ù–∞–∑–∞–¥":
        user_states[chat_id] = None
        bot.send_message(chat_id, "–í—ã–±–∏—Ä–∞–π –∏–≥—Ä—É!", reply_markup=start_markup)

    elif chat_id in user_states and isinstance(user_states[chat_id], dict):
        state = user_states[chat_id]["state"]

        if state == "battle" and message.text:
            round_num = user_states[chat_id]["round"]
            user_poem = message.text
            rival_poems = generate_poem(round_num)
            bot.send_message(chat_id, f"–†–∞—É–Ω–¥ {round_num}. –í—Å–µ –ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏:\n\n{rival_poems}")

            # –î–ª—è –æ—Ü–µ–Ω–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é –º–æ–¥–µ–ª—å (gpt-3.5-turbo)
            rival_poem = rival_poems.split("\n\n")[0].split("\n", 1)[1]
            user_score = evaluate_poem(user_poem, is_user=True)
            if "–û—à–∏–±–∫–∞" in str(user_score):
                bot.send_message(chat_id, user_score)
                return
            rival_score = evaluate_poem(rival_poem)
            if "–û—à–∏–±–∫–∞" in str(rival_score):
                bot.send_message(chat_id, rival_score)
                return

            battle_scores[chat_id].append((user_poem, user_score, rival_poem, rival_score))

            winner = "–¢—ã" if user_score > rival_score else "–ò–ò" if rival_score > user_score else "–ù–∏—á—å—è"
            bot.send_message(chat_id, f"–†–∞—É–Ω–¥ {round_num}: {winner} –≤–ø–µ—Ä–µ–¥–∏ (–æ—Ü–µ–Ω–∫–∞ –ø–æ gpt-3.5-turbo).")

            if user_score > rival_score:
                user_states[chat_id]["user_wins"] += 1
            elif rival_score > user_score:
                user_states[chat_id]["rival_wins"] += 1

            if user_states[chat_id]["user_wins"] == 2 or user_states[chat_id]["rival_wins"] == 2 or round_num == 3:
                leaderboard_battle[username]["games"] += 1
                if user_states[chat_id]["user_wins"] > user_states[chat_id]["rival_wins"]:
                    leaderboard_battle[username]["wins"] += 1
                    winner_msg = f"–¢—ã –ø–æ–±–µ–¥–∏–ª {user_states[chat_id]['user_wins']}:{user_states[chat_id]['rival_wins']}!"
                elif user_states[chat_id]["rival_wins"] > user_states[chat_id]["user_wins"]:
                    winner_msg = f"–ò–ò –ø–æ–±–µ–¥–∏–ª–∏ {user_states[chat_id]['rival_wins']}:{user_states[chat_id]['user_wins']}."
                else:
                    winner_msg = "–ù–∏—á—å—è!"

                scores_msg = "\n".join(
                    f"–†–∞—É–Ω–¥ {i + 1}: –¢—ã - {s[1]}/10, –ò–ò - {s[3]}/10" for i, s in enumerate(battle_scores[chat_id]))
                bot.send_message(chat_id, f"üéâ –ò—Ç–æ–≥:\n{scores_msg}\n{winner_msg}", reply_markup=start_markup)
                user_states[chat_id] = None
                del battle_scores[chat_id]
            else:
                user_states[chat_id]["round"] += 1
                bot.send_message(chat_id, f"–†–∞—É–Ω–¥ {round_num + 1}. –ß–∏—Ç–∞–π –¥–∞–ª—å—à–µ!", reply_markup=game_menu)

        elif state == "rhyme_game" and message.text:
            if message.text.lower() == "—Å—Ç–æ–ø":
                rounds = user_states[chat_id]["rounds"]
                if rounds > leaderboard_rhyme[username]["longest_rounds"]:
                    leaderboard_rhyme[username]["longest_rounds"] = rounds
                bot.send_message(chat_id, f"üéµ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –†–∞—É–Ω–¥–æ–≤: {rounds}", reply_markup=start_markup)
                user_states[chat_id] = None
            else:
                user_line = message.text
                rival_lines = generate_rhyme(user_line)
                bot.send_message(chat_id, f"–¢–≤–æ—è —Å—Ç—Ä–æ–∫–∞: {user_line}\n\n{rival_lines}")
                user_states[chat_id]["rounds"] += 1

    elif chat_id in user_states and user_states[chat_id] == "awaiting_feedback":
        try:
            if message.text:
                bot.send_message(MY_CHAT_ID, f"–°–≤—è–∑—å –æ—Ç @{username}:\n{message.text}")
            elif message.photo:
                bot.forward_message(MY_CHAT_ID, chat_id, message.message_id)
            elif message.video:
                bot.forward_message(MY_CHAT_ID, chat_id, message.message_id)
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–∏–¥–±–µ–∫!", reply_markup=start_markup)
            user_states[chat_id] = None
        except Exception as e:
            bot.send_message(chat_id, f"–û—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!")

    else:
        bot.send_message(chat_id, "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏! /start ‚Äî –¥–ª—è –Ω–∞—á–∞–ª–∞.")


bot.polling(none_stop=True)
